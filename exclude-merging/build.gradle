import org.gradle.util.GradleVersion

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-resolution-rules-plugin:3.0.0"
    }
}

boolean useExcludes = !project.hasProperty('noExcludes')
boolean useLocking = project.hasProperty('useLocking')
boolean useHttp = project.hasProperty("useHttp")

println """
Excludes            : ${useExcludes}
Locking             : ${useLocking}
HTTP                : ${useHttp}
"""

allprojects {
    apply plugin: 'java'
    if (useExcludes) {
        apply plugin: 'nebula.resolution-rules'
    }
    repositories {
        def httpPort = project.hasProperty('httpPort') ? project.findProperty('httpPort') : '8000'
        def repositoryBase = useHttp ? "http://127.0.0.1:${httpPort}" : "${rootProject.projectDir}/repository"
        ivy {
            url "$repositoryBase/ivy"
        }
        maven {
            url "$repositoryBase/maven"
            metadataSources {
                mavenPom()
                artifact() // the test repository is missing 'maven-metadata.xml' files and directory listings need to be used to discover dynamic versions
            }
        }
        flatDir {
            dirs rootProject.file('rules')
        }
    }

    if (useExcludes) {
        apply plugin: 'nebula.resolution-rules'
    }

    configurations {
        simpletest
    }

    if (useLocking) {
        ['compileClasspath', 'testCompileClasspath', 'runtimeClasspath', 'testRuntimeClasspath'].each {
            configurations."$it".resolutionStrategy.activateDependencyLocking()
        }
    }

    dependencies {
        if (useExcludes) {
            resolutionRules name: 'gradle-resolution-rules-0.28.0'
            resolutionRules name: 'resolution-rules-0.12.0'
        }

        simpletest('scott.black.hawk.down:character330:latest.release') { transitive = false }

        components.all { ComponentMetadataDetails details ->
            details.statusScheme = ['snapshot', 'integration', 'candidate', 'release']

            def version = details.id.version
            if (version.contains("CANDIDATE") || version.contains("RC") || version.contains("BETA")) {
                details.status = 'candidate'
            }
            if (version.contains("SNAPSHOT")) {
                details.status = 'snapshot'
            }
            // Seen coming from maven
            if (details.status == null) {
                details.status = 'release'
            }

            if (details.status == 'snapshot' || details.status == 'integration') {
                details.changing = true
            }
        }
    }
}

int i = 0

if (!useExcludes) {
    println "Not using excludes, nor dependency rules plugin"
}

allprojects {
    dependencies {
        modules {
            module('com.google.inject:guice-assistedinject') {
                replacedBy('com.google.inject.extensions:guice-assistedinject')
            }
            module('com.google.inject:guice-throwingproviders') {
                replacedBy('com.google.inject.extensions:guice-throwingproviders')
            }
            module('scott.black.hawk.down:json') {
                replacedBy('org.json:json')
            }
        }
    }

    if (useExcludes) {
        def gid = ['foo', 'bar', 'baz']
        def aid = ['x', 'y', 'z', 'k', 't', 'u']
        // manage all exclusions in one place
        configurations.all {
            if (it.name != 'simpletest') {

                exclude group: 'javax.servlet', module: 'servlet'
                exclude group: 'javax.servlet', module: 'servlet-api'
                exclude group: 'weblogic', module: 'wlfullclient'
                exclude group: 'scott.black.hawk.down', module: 'map-title'
                exclude group: 'scott.black.hawk.down', module: 'rentalhistory'
                exclude group: 'scott.black.hawk.down', module: 'rentalhistory-client'
                exclude group: 'scott.black.hawk.down', module: 'rentalhistory-common'
                exclude group: 'org.mockito', module: 'mockito-all'
                //exclude group: 'scott.black.hawk.down', module: 'character235'
                exclude group: 'scott.black.hawk.down', module: 'queue'
                exclude group: 'kafka', module: 'core'
                exclude group: 'amazon', module: 'hadoop-core-emr'
                exclude group: 'javax.el', module: 'el-api'
                exclude group: 'javax.servlet.jsp.jstl', module: 'jstl-api'
                exclude group: 'javax.servlet.jsp', module: 'jsp-api'
                exclude group: 'org.mortbay.jetty', module: 'servlet-api'
                exclude group: 'org.glassfish.web', module: 'jstl-impl'
                exclude group: 'org.scribe', module: 'scribe'
                exclude group: '', module: 'content'
                exclude group: 'org.springframework', module: 'spring'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-activation_1.1_spec'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-annotation_1.0_spec'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jaxws_2.1_spec'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-ws-metadata_2.0_spec'
                exclude group: 'org.apache.cxf', module: 'cxf'
                exclude group: 'org.apache.geronimo.bundles', module: 'json'
                exclude group: 'com.google.guava', module: 'guava-jdk5'
                //junit:junit-dep has become obsolete.
                exclude group: 'junit', module: 'junit-dep'
                //used by traceagent
                exclude group: 'javassist', module: 'javassist'
                exclude group: 'xerces', module: 'xerces'
                exclude group: 'jtidy', module: 'jtidy'
                exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.commons-csv'
                // these are pulled in from playback-features and not needed
                exclude group: 'scott.black.hawk.down', module: 'reloaded-commons'
                exclude group: 'scott.black.hawk.down', module: 'mp4tools'

                // use the individual jars
                exclude group: 'cglib', module: 'cglib-nodep'
                exclude group: 'org.ow2.asm', module: 'asm-all'
                exclude group: 'org.ow2.asm', module: 'asm-debug-all'
                exclude group: 'io.netty', module: 'netty-all'

                // force to use io.reactivex
                exclude group: 'com.netflix.rxjava'

                // force to use io.reactivex:rxnetty-*
                exclude group: 'io.reactivex', module: 'rxnetty'

                exclude group: 'scott.black.hawk.down', module: 'cryptexclient'
                exclude group: 'scott.black.hawk.down', module: 'crypto-common'
                exclude group: 'com.github.fommil.netlib'

                // prefer bcprov-jdk16
                exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'

                // exclude slf4j-simple so we ensure we are using a real implementation
                exclude group: 'org.slf4j', module: 'slf4j-simple'

                // accessors-smart includes re-packaged ASM classes
                exclude group: 'net.minidev', module: 'accessors-smart'
                exclude group: 'net.minidev', module: 'json-smart'

                i++
                exclude group: gid[i % gid.size()], module: aid[i % (aid.size())]

            }
        }
    }
}

subprojects {
    // unlocked dependencies
    ext.dependencyReleaseStatus = 'release'
}

project(':api-trace-agent') {
    dependencies {
        //implementation project(':api-trace-common')
    }
}

project(':api') {
    dependencies {
        implementation project(':api-service-layer-run')
        implementation project(':api-groovy-extensions')
        implementation project(':api-trace-agent')
        implementation project(':api-dependencies')
    }
}

project(':api-test') {
    dependencies {
        implementation project(':api-service-layer-endpoints')
        implementation project(':api-service-layer')
    }
}

project(':api-service-layer') {
    dependencies {
        implementation project(':api-service-layer-endpoints')
        //implementation project(':api-trace-common')
    }
}

project(':api-service-layer-impl') {
    dependencies {
        implementation project(':api-test')
        implementation project(':api-service-layer')
        testImplementation project(':api-service-layer-run')
        implementation project(':api-dependencies')
        //implementation project(':api-trace-common')
    }
}

project(':api-service-layer-run') {
    dependencies {
        implementation project(':api-service-layer-endpoints')
        implementation project(':api-dependencies')
    }
}

project(':api-dependencies') {
    dependencies {
        implementation project(':api-test')
        implementation project(':api-service-layer')
        implementation project(':api-platform')
        implementation project(':api-service-layer-endpoints')
    }
}

project(':api-service-layer-endpoints') {
    dependencies {
        implementation project(':api-platform')
    }
}

project(':api-platform') {
    dependencies {
    }
}

allprojects {
    task resolveDependencies {
        def configs = ['compileClasspath', 'testCompileClasspath', 'runtimeClasspath', 'testRuntimeClasspath']
	dependsOn configs.collect { configurations.getByName(it) }
        doLast {
	    configs.each { configurations.getByName(it).files }
        }
    }
}
